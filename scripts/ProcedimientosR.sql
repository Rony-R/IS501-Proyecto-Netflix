
--Linea para desbloquear la consola:
SET SERVEROUTPUT ON;

--Insertar una pantalla:
CREATE OR REPLACE PROCEDURE P_INSERTAR_PANTALLA(
    P_COD_USU TBL_PANTALLAS.CODIGO_USUARIO%TYPE,
    P_COD_MAD TBL_PANTALLAS.CODIGO_MADUREZ%TYPE,
    P_COD_IDI_LEN TBL_PANTALLAS.CODIGO_IDIOMA_LENGUAJE%TYPE,
    P_COD_EST_SUB TBL_PANTALLAS.CODIGO_ESTILO_SUB%TYPE,
    P_COD_CONF_REP TBL_PANTALLAS.CODIGO_CONFIG_REPRODUCCION%TYPE,
    P_NOM_PAN TBL_PANTALLAS.NOMBRE_PANTALLA%TYPE
) AS

BEGIN
    INSERT INTO TBL_PANTALLAS (CODIGO_PANTALLA, CODIGO_USUARIO, CODIGO_MADUREZ, CODIGO_IDIOMA_LENGUAJE, CODIGO_ESTILO_SUB, CODIGO_CONFIG_REPRODUCCION, NOMBRE_PANTALLA, CORREO_PANTALLA, URL_IMG_PANTALLA) VALUES (SEQ_COD_PANTALLA.NEXTVAL, P_COD_USU, P_COD_MAD, P_COD_IDI_LEN, P_COD_EST_SUB, P_COD_CONF_REP, P_NOM_PAN, NULL, NULL);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_INSERTAR_PANTALLA(2, 3, 1, 0, 0, 'Nombre 1');



--Actualizar info pantalla: manage.php
CREATE OR REPLACE PROCEDURE P_ACTUALIZAR_PANTALLA(
    P_CODIGO_PANTALLA TBL_PANTALLAS.CODIGO_PANTALLA%TYPE,
    P_CODIGO_MADUREZ TBL_PANTALLAS.CODIGO_MADUREZ%TYPE,
    P_CODIGO_IDIOMA_LENGUAJE TBL_PANTALLAS.CODIGO_IDIOMA_LENGUAJE%TYPE,
    P_NOMBRE_PANTALLA TBL_PANTALLAS.NOMBRE_PANTALLA%TYPE,
    P_URL_IMG_PANTALLA TBL_PANTALLAS.URL_IMG_PANTALLA%TYPE
) AS

BEGIN
    UPDATE TBL_PANTALLAS 
    SET  TBL_PANTALLAS.CODIGO_MADUREZ = P_CODIGO_MADUREZ,
         TBL_PANTALLAS.CODIGO_IDIOMA_LENGUAJE = P_CODIGO_IDIOMA_LENGUAJE,
         TBL_PANTALLAS.NOMBRE_PANTALLA = P_NOMBRE_PANTALLA,
         TBL_PANTALLAS.URL_IMG_PANTALLA = P_URL_IMG_PANTALLA
    WHERE TBL_PANTALLAS.CODIGO_PANTALLA = P_CODIGO_PANTALLA;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ACTUALIZAR_PANTALLA (25, 1, 5, 'LUISITA', null);



--Actualizar correo del usuario: 
CREATE OR REPLACE PROCEDURE P_ACTUALIZAR_CORREO(
    P_CORREO_VIEJO TBL_USUARIOS.CORREO%TYPE,
    P_CORREO_NUEVO TBL_USUARIOS.CORREO%TYPE
) AS

BEGIN
    UPDATE TBL_USUARIOS
    SET TBL_USUARIOS.CORREO = P_CORREO_NUEVO
    WHERE TBL_USUARIOS.CORREO = P_CORREO_VIEJO;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ACTUALIZAR_CORREO('rony@gmail.com', 'rony2@gmail.com');



--Actualizar Contrase√±a
CREATE OR REPLACE PROCEDURE P_ACTUALIZAR_CONTRA(
    P_CONTRA_VIEJA TBL_USUARIOS.CONTRASENIA%TYPE,
    P_CONTRA_NUEVA TBL_USUARIOS.CONTRASENIA%TYPE
) AS

BEGIN

    UPDATE TBL_USUARIOS
    SET TBL_USUARIOS.CONTRASENIA = P_CONTRA_NUEVA
    WHERE TBL_USUARIOS.CONTRASENIA = P_CONTRA_VIEJA;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ACTUALIZAR_CONTRA('rony', 'rony2');



--Actualizar numero de telefono
CREATE OR REPLACE PROCEDURE P_ACTUALIZAR_TELEFONO(
    P_TELEFONO TBL_USUARIOS.TELEFONO%TYPE,
    P_USUARIO TBL_USUARIOS.CORREO%TYPE
) AS

BEGIN

    UPDATE TBL_USUARIOS
    SET TBL_USUARIOS.TELEFONO = P_TELEFONO
    WHERE TBL_USUARIOS.CORREO = P_USUARIO;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ACTUALIZAR_TELEFONO('98351400', 'rony2@gmail.com');


--Eliminar telefono
CREATE OR REPLACE PROCEDURE P_ELIMINAR_TELEFONO(
    P_TELEFONO TBL_USUARIOS.TELEFONO%TYPE,
    P_USUARIO TBL_USUARIOS.CORREO%TYPE
) AS

BEGIN

    UPDATE TBL_USUARIOS
    SET TBL_USUARIOS.TELEFONO = ' '
    WHERE TBL_USUARIOS.CORREO = P_USUARIO;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ELIMINAR_TELEFONO('98351400', 'rony2@gmail.com');



--Actualizar informacion de pago
CREATE OR REPLACE PROCEDURE P_ACTUALIZAR_INFO_PAGO(
    P_COD_USUARIO TBL_REGISTRO_TARJETA.CODIGO_USUARIO%TYPE,
    P_TIPO_TARJETA TBL_REGISTRO_TARJETA.CODIGO_TIPO_TARJETA%TYPE,
    P_NOMBRE TBL_REGISTRO_TARJETA.NOMBRE_USUARIO%TYPE,
    P_APELLIDO TBL_REGISTRO_TARJETA.APELLIDO_USUARIO%TYPE,
    P_TARJETA TBL_REGISTRO_TARJETA.NUMERO_DE_TARJETA%TYPE,
    P_FECHA TBL_REGISTRO_TARJETA.NUMERO_DE_TARJETA%TYPE,
    P_SEGURIDAD TBL_REGISTRO_TARJETA.CODIGO_DE_SEGURIDAD%TYPE
) AS
BEGIN

    UPDATE TBL_REGISTRO_TARJETA
    SET TBL_REGISTRO_TARJETA.NOMBRE_USUARIO = P_NOMBRE,
        TBL_REGISTRO_TARJETA.APELLIDO_USUARIO = P_APELLIDO,
        TBL_REGISTRO_TARJETA.NUMERO_DE_TARJETA = P_TARJETA,
        TBL_REGISTRO_TARJETA.FECHA_VENCIMIENTO = to_date(P_FECHA, 'YYYY-MM-DD'),
        TBL_REGISTRO_TARJETA.CODIGO_DE_SEGURIDAD = P_SEGURIDAD,
        TBL_REGISTRO_TARJETA.CODIGO_TIPO_TARJETA = P_TIPO_TARJETA
    WHERE TBL_REGISTRO_TARJETA.CODIGO_USUARIO = P_COD_USUARIO;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_ACTUALIZAR_INFO_PAGO(1, 1, 'Roni', 'rodriguez', '123123123', '12/20', '0000');

---***** SIGNE *****

--Insertar un contenido
CREATE OR REPLACE PROCEDURE P_INSERTAR_CONTENIDO(
    P_COD_TIPO_CONTENIDO TBL_CONTENIDO.CODIGO_TIPO_CONTENIDO%TYPE,
    P_COD_ESTUDIO TBL_CONTENIDO.CODIGO_ESTUDIO%TYPE,
    P_COD_IDIOMA TBL_CONTENIDO.CODIGO_IDIOMA%TYPE,
    P_COD_CALIF TBL_CONTENIDO.CODIGO_CALIF_EDAD%TYPE,
    P_NOMBRE_CONTENIDO TBL_CONTENIDO.NOMBRE_CONTENIDO%TYPE,
    P_U_VID TBL_CONTENIDO.URL_VIDEO%TYPE,
    P_U_MIN TBL_CONTENIDO.URL_MINIATURA%TYPE,
    P_DESCRIPCION TBL_CONTENIDO.DESCRIPCION%TYPE,
    P_FECHA TBL_CONTENIDO.FECHA_SUBIDA%TYPE
)AS
BEGIN

    INSERT INTO TBL_CONTENIDO (CODIGO_CONTENIDO, CODIGO_TIPO_CONTENIDO, CODIGO_ESTUDIO, CODIGO_IDIOMA, CODIGO_CALIF_EDAD, NOMBRE_CONTENIDO, URL_VIDEO, URL_MINIATURA, DESCRIPCION, FECHA_SUBIDA) VALUES (SEQ_COD_CONTENIDO.NEXTVAL, P_COD_TIPO_CONTENIDO, P_COD_ESTUDIO, P_COD_IDIOMA, P_COD_CALIF, P_NOMBRE_CONTENIDO, P_U_VID, P_U_MIN, P_DESCRIPCION, P_FECHA);
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END; 

--Ejecucion:
CALL P_INSERTAR_CONTENIDO (1, 2, 2, 2, 'Super Bad', 'URL VID 2', 'URL IMG 2', 'PELI CHIHSTOSA', to_date('21/2/2019', 'DD/MM/YYYY'));


--Insertar tabla pelis
CREATE OR REPLACE PROCEDURE P_INSERTAR_PELI(
    P_COD_CONTENIDO TBL_CONTENIDO.CODIGO_CONTENIDO%TYPE,
    P_CODIGO_UNIDAD TBL_UNIDADES.CODIGO_UNIDAD%TYPE,
    P_DURACION TBL_PELICULAS.DURACION_PELI%TYPE
) AS

BEGIN
    INSERT INTO TBL_PELICULAS (CODIGO_PELICULA, CODIGO_UNIDAD, DURACION_PELI) VALUES (P_COD_CONTENIDO, P_CODIGO_UNIDAD, P_DURACION);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_INSERTAR_PELI(1, 5, 90);


--Insertar tabla series
CREATE OR REPLACE PROCEDURE P_INSERTAR_SERIE(
    P_COD_CONTENIDO TBL_CONTENIDO.CODIGO_CONTENIDO%TYPE,
    P_NUM_TEMPORADAS TBL_SERIES.CANTIDAD_TEMPORADAS%TYPE
) AS
BEGIN

    INSERT INTO TBL_SERIES (CODIGO_CONTENIDO, CANTIDAD_TEMPORADAS) VALUES (P_COD_CONTENIDO, P_NUM_TEMPORADAS);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_INSERTAR_SERIE(6, 9);


--Insertar tabla temporadas
CREATE OR REPLACE PROCEDURE P_INSERTAR_TEMPORADA(
    P_COD_SERIE TBL_TEMPORADAS.CODIGO_SERIE%TYPE,
    P_NUM_TEMPORADA TBL_TEMPORADAS.NUMERO_TEMPORADA%TYPE,
    P_DESCRIPCION TBL_TEMPORADAS.DESCRIPCION_TEMPORADA%TYPE
) AS
BEGIN

    INSERT INTO TBL_TEMPORADAS (CODIGO_TEMPORADA, CODIGO_SERIE, NUMERO_TEMPORADA, DESCRIPCION_TEMPORADA) VALUES (SEQ_COD_TEMPORADA.NEXTVAL, P_COD_SERIE, P_NUM_TEMPORADA, P_DESCRIPCION);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_INSERTAR_TEMPORADA(6, 1, 'Temporada de patos');


--Insertr un episodio
CREATE OR REPLACE PROCEDURE P_INSERTAR_EPISODIO(
    P_COD_TEMPORADA TBL_TEMPORADAS.CODIGO_TEMPORADA%TYPE,
    P_COD_UNIDAD_DURACION TBL_UNIDADES.CODIGO_UNIDAD%TYPE,
    P_NOMBRE TBL_EPISODIOS.NOMBRE_EPISODIO%TYPE,
    P_NUMERO_EP TBL_EPISODIOS.NUMERO_EPISODIO%TYPE,
    P_DESCRIPCION TBL_EPISODIOS.DESCRIPCION_EPISODIO%TYPE,
    P_DURACION TBL_EPISODIOS.DURACION_EPISODIO%TYPE
) AS
BEGIN

    INSERT INTO TBL_EPISODIOS (CODIGO_EPISODIO, CODIGO_TEMPORADA, CODIGO_UNIDAD_DURACION, NOMBRE_EPISODIO, NUMERO_EPISODIO, DESCRIPCION_EPISODIO, DURACION_EPISODIO) VALUES (SEQ_COD_EPISODIO.NEXTVAL, P_COD_TEMPORADA, P_COD_UNIDAD_DURACION, P_NOMBRE, P_NUMERO_EP, P_DESCRIPCION, P_DURACION);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLCODE || '-'||SQLERRM);
    ROLLBACK;

END;

--Ejecucion:
CALL P_INSERTAR_EPISODIO(2, 5, 'Rick Grimes', 1, 'Rick sale al mundo', 40);